# name: Deploy and Destroy EC2

# on:
#   push:
#     branches:
#       - main
# permissions:
#       id-token:write
#       contents:read
      

# jobs:
#   deploy:
#     runs-on: ubuntu-latest 

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     - name: Setup Node.js
#       uses: actions/setup-node@v3
#       with:
#         node-version: 22

#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v2
#       with:
#         terraform_version: 1.9.1 

#     - name: Create AWS Credentials Directory
#       run: mkdir -p ~/.aws

#     - name: Setup AWS Credentials
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_REGION: ${{ secrets.AWS_REGION }}
#       run: |
#         echo "[default]" > ~/.aws/credentials
#         echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
#         echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
#         echo "[default]" > ~/.aws/config
#         echo "region = $AWS_REGION" >> ~/.aws/config

#     - name: Initialize Terraform
#       working-directory: ./Terraform-Script
#       run: terraform init

#     - name: Apply Terraform
#       working-directory: ./Terraform-Script
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_REGION: ${{ secrets.AWS_REGION }}
#       run: terraform apply -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -auto-approve

#     - name: Wait for 10 minutes
#       run: sleep 600

#     - name: Destroy Terraform
#       working-directory: ./Terraform-Script
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_REGION: ${{ secrets.AWS_REGION }}
#       run: terraform destroy -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var "key_name=DevOps-FP" -auto-approve
name: "Terraform action"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
              node-version: 22
              
      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        working-directory: ./Terraform-Script
        id: init
        run: terraform init 

      - name: Terraform Validate
        id: validate
        working-directory: ./Terraform-Script
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./Terraform-Script
        run: terraform plan 

      # - uses: actions/github-script@v6
      #   if: github.event_name == 'push'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>

      #       \`\`\`\n
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`

      #       </details>

      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./Terraform-Script
        run: terraform apply -auto-approve -input=false

      - name: Wait for 1 minutes
        run: sleep 60

      - name: Destroy Terraform
        working-directory: ./Terraform-Script
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}
        run: terraform destroy
 

