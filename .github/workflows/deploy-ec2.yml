name: "Deploy and configure ec2 Instance"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
              node-version: 22

              
      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        working-directory: ./Terraform-Script
        id: init
        run: terraform init 

      - name: Terraform Validate
        id: validate
        working-directory: ./Terraform-Script
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./Terraform-Script
        run: terraform plan 

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./Terraform-Script
        run: terraform apply -auto-approve -input=false
        
      - name: Extract EC2 Public IP
        id: extract-ip
        working-directory: ./Terraform-Script
        run: |
          instance_id=$(terraform output -raw instance_id)
          echo "Instance ID: $instance_id"
          instance_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "Instance IP: $instance_ip"
          echo "instance_ip=$instance_ip" >> $GITHUB_ENV

      - name: Install Python and Boto3
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          pip3 install boto3

      - name: Create Ansible Inventory
        run: |
          echo "[ec2_instances]" > ./Inventory-Ansible/inventory.ini
          echo "$instance_ip ansible_user=ubuntu ansible_ssh_private_key_file=/path/to/DevOps-FP.pem" >> ./Inventory-Ansible/inventory.ini

      - name: Run Ansible playbook with Dynamic Inventory
        run: |
          chmod +x ./Inventory-Ansible/ec2.py
          ansible-playbook -i ./Inventory-Ansible/inventory.ini ./Ansible-Playbook/playbook.yaml
          
      - name: Wait for 1 minute
        run: sleep 360

      - name: Destroy Terraform
        working-directory: ./Terraform-Script
        # env:
        #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #     AWS_REGION: ${{ secrets.AWS_REGION }}
        run: terraform destroy -auto-approve
 

